{"ast":null,"code":"var _jsxFileName = \"/Users/keremguventurk/Desktop/northwestern/winter2020/bme390-2/Self-Service-Database-UI/src/views/PatientImagesPage.jsx\";\nimport React, { Component } from \"react\";\nimport { Grid, Row, Col, DropdownButton } from \"react-bootstrap\";\nimport CustomButton from \"components/CustomButton/CustomButton\";\nimport TableList from \"./TableList.jsx\";\nimport { apiBaseURL } from \"./Dashboard.jsx\";\n\nconst axios = require(\"axios\");\n\nconst filter_categories = [\"Exam ID\", \"Exam Date\", \"Image ID\", \"Image Procedure\", \"Image Laterality\", \"Link To Image\"]; //Feb. 10, 2020categoryFilterPressed  still needs to be written\n//PatientImagesPage displays a table of a list of images relating to one exam of one patient\n\nclass PatientImagesPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      patientID: null,\n      filterCategories: filter_categories,\n      selectedFilterCategories: filter_categories,\n      exportPressed: {\n        display: false\n      },\n      tableKey: 0,\n      paginationNumber: 1\n    };\n    this.getData = this.getData.bind(this);\n    this.getFilters = this.getFilters.bind(this);\n    this.getTable = this.getTable.bind(this);\n    this.getExport = this.getExport.bind(this);\n    this.exportImagesPressed = this.exportImagesPressed.bind(this);\n    this.exportAllImagesPressed = this.exportAllImagesPressed.bind(this);\n    this.exportCategoryPressed = this.exportCategoryPressed.bind(this);\n    this.backButtonPressed = this.backButtonPressed.bind(this);\n    this.categoryFilterPressed = this.categoryFilterPressed.bind(this);\n    this.paginationClicked = this.paginationClicked.bind(this);\n    this.getPagination = this.getPagination.bind(this);\n  }\n\n  componentDidMount() {\n    if (!this.props.pageStatus.PatientImagesPage) {\n      return;\n    }\n\n    this.setState({\n      patientID: this.props.pageStatus.PatientImagesPage.patientID\n    }, () => this.getData());\n  } //Acquires data from the API and sets the state of patientInfo to be patientInfo\n\n\n  getData() {\n    let currentComponent = this;\n    let patientID = this.state.patientID;\n    let link = apiBaseURL + \"/ssd_api/patient_images?pt_id=\" + patientID;\n    var autToken = \"Basic \" + btoa(this.props.accessToken + \":something\");\n    const options = {\n      url: link,\n      method: 'get',\n      headers: {\n        'Authorization': autToken\n      }\n    };\n    axios(options).then(function (response) {\n      console.log(\"PATIENT INFO GATHERED\", response.data);\n      let patientInfo = response.data.result[patientID];\n      currentComponent.setState({\n        patientInfo: patientInfo,\n        loaded: true\n      });\n    }).catch(function (error) {\n      console.log(error);\n\n      if (error.message === \"Request failed with status code 401\") {\n        currentComponent.props.backToLoginPage();\n      }\n    });\n  } //Acquires the list of filters to populate on the left side of the website\n\n\n  getFilters() {\n    let filter_categories = this.state.filterCategories;\n    let temp_filter_categories = [];\n\n    for (let i = 0; i < filter_categories.length; i++) {\n      let category_name = filter_categories[i];\n      let temp_filter_category = null;\n\n      if (this.state.selectedFilterCategories.indexOf(category_name) !== -1) {\n        temp_filter_category = React.createElement(CustomButton, {\n          style: styles.buttonDivPressed,\n          title: category_name,\n          onClick: e => this.categoryFilterPressed(e),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, \" \", category_name, \" \");\n      } else {\n        temp_filter_category = React.createElement(CustomButton, {\n          style: styles.buttonDiv,\n          title: category_name,\n          onClick: e => this.categoryFilterPressed(e),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 111\n          },\n          __self: this\n        }, \" \", category_name, \" \");\n      }\n\n      temp_filter_categories.push(temp_filter_category);\n    }\n\n    return temp_filter_categories;\n  } //gets the table of information for the right side of the website\n\n\n  getTable() {\n    var nullTable = React.createElement(Col, {\n      style: styles.titleText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \" No Images Satisfies This Criteria \"));\n\n    if (!this.state.loaded || !this.state.patientInfo) {\n      return nullTable;\n    }\n\n    let selectedCategories = [];\n\n    for (let i = 0; i < this.state.filterCategories.length; i++) {\n      let category = this.state.filterCategories[i];\n\n      if (this.state.selectedFilterCategories.indexOf(category) !== -1) {\n        selectedCategories.push(category);\n      }\n    } //from the this.state.patientInfo, acquire imageinfo, then push the contents of imageinfo into tempImageData\n    //i represents the number of patients\n    //j represents the images?\n    //The other j represents going through each category\n    //k represents going through each image's data (and pushing that category information onto each image)\n    //After completing tempImageData, create tableData to display on the webpage\n    //TableList object with categories as columns and tableData as the rows\n\n\n    let tableData = [];\n\n    for (let i = 0; i < this.state.patientInfo.length; i++) {\n      let imageInfo = this.state.patientInfo[i];\n      let tempImageData = [];\n\n      for (let j = 0; j < imageInfo.images.length; j++) {\n        tempImageData.push([]);\n      }\n\n      for (let j = 0; j < selectedCategories.length; j++) {\n        let category = selectedCategories[j];\n\n        if (category === \"Exam ID\") {\n          for (let k = 0; k < tempImageData.length; k++) {\n            let value = {\n              type: \"string\",\n              text: imageInfo.exam_id\n            };\n            tempImageData[k].push(value);\n          }\n        } else if (category === \"Exam Date\") {\n          for (let k = 0; k < tempImageData.length; k++) {\n            let value = {\n              type: \"string\",\n              text: imageInfo.exam_date\n            };\n            tempImageData[k].push(value);\n          }\n        } else if (category === \"Image ID\") {\n          for (let k = 0; k < imageInfo.images.length; k++) {\n            let value = {\n              type: \"string\",\n              text: imageInfo.images[k].image_id\n            };\n            tempImageData[k].push(value);\n          }\n        } else if (category === \"Image Procedure\") {\n          for (let k = 0; k < imageInfo.images.length; k++) {\n            let value = {\n              type: \"string\",\n              text: imageInfo.images[k].image_type\n            };\n            tempImageData[k].push(value);\n          }\n        } else if (category === \"Image Laterality\") {\n          for (let k = 0; k < imageInfo.images.length; k++) {\n            let value = {\n              type: \"string\",\n              text: imageInfo.images[k].image_laterality\n            };\n            tempImageData[k].push(value);\n          }\n        } else if (category === \"Link To Image\") {\n          for (let k = 0; k < imageInfo.images.length; k++) {\n            let tempPageStatus = this.props.pageStatus;\n            tempPageStatus[\"ShowPatientImagePage\"] = {\n              imageID: imageInfo.images[k].image_id,\n              patientID: this.state.patientID\n            };\n            let newState = {\n              page: \"ShowPatientImagePage\",\n              pageStatus: tempPageStatus\n            };\n            let value = {\n              type: \"button\",\n              text: \"See Image\",\n              submitFunction: newState => this.props.changePage(newState),\n              submitInformation: newState\n            };\n            tempImageData[k].push(value);\n          }\n        }\n      }\n\n      for (let j = 0; j < tempImageData.length; j++) {\n        tableData.push(tempImageData[j]);\n      }\n    }\n\n    var tempTableData = [];\n\n    for (var i = (this.state.paginationNumber - 1) * 4; i < Math.min(this.state.paginationNumber * 4, tableData.length); i++) {\n      tempTableData.push(tableData[i]);\n    }\n\n    this.state.tableKey++;\n    return React.createElement(TableList, {\n      key: this.state.tableKey,\n      columns: selectedCategories,\n      rows: tempTableData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    });\n  }\n\n  exportImagesPressed() {} //code for exporting all images\n  //If the category filter is pressed, update the state of selectedFilterCategories to what is newly selected\n\n\n  categoryFilterPressed(e) {\n    let category = e.target.title;\n\n    if (this.state.selectedFilterCategories.indexOf(category) === -1) {\n      this.state.selectedFilterCategories.push(category);\n      this.setState({\n        selectedFilterCategories: this.state.selectedFilterCategories,\n        tableKey: this.state.tableKey + 1\n      });\n    } else {\n      let new_list = this.state.selectedFilterCategories.filter(function (name) {\n        return name !== category;\n      });\n      this.setState({\n        selectedFilterCategories: new_list,\n        tableKey: this.state.tableKey + 1\n      });\n    }\n  } //similar to the other pages, to be used in the getExport function, sets the state when the button is pressed\n\n\n  exportAllImagesPressed() {\n    this.setState({\n      exportPressed: {\n        display: !this.state.exportPressed.display\n      }\n    });\n  } //Generate multilple buttons when the export all images button is pressed\n\n\n  getExport() {\n    if (!this.state.exportPressed.display) {\n      return React.createElement(CustomButton, {\n        style: styles.buttonUpperExport,\n        onClick: () => this.exportAllImagesPressed(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, \"EXPORT ALL IMAGES\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      style: styles.buttonUpperExport,\n      onClick: () => this.exportAllImagesPressed(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, \"EXPORT ALL IMAGES\"), React.createElement(\"div\", {\n      style: styles.exportDropdownPressed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      title: \"by Patient ID\",\n      onChange: e => this.exportCategoryPressed(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }), \"by Patient ID\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      title: \"by diagnosis\",\n      onChange: e => this.exportCategoryPressed(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }), \"by diagnosis\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      title: \"by image procedure\",\n      onChange: e => this.exportCategoryPressed(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }), \"by image procedure\")), React.createElement(CustomButton, {\n      style: styles.buttonUpperExport,\n      onClick: () => this.exportImagesPressed(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }, \"EXPORT IMAGES\"));\n  } //indicates/sets the state when an export category is pressed\n\n\n  exportCategoryPressed(e) {\n    let category = e.target.title;\n\n    if (this.state.exportPressed[category]) {\n      this.setState({\n        exportPressed: {\n          [category]: !this.state.exportPressed.display,\n          display: true\n        }\n      });\n    } else {\n      this.setState({\n        exportPressed: {\n          [category]: true,\n          display: true\n        }\n      });\n    }\n  } //Goes back to the PatientsPage when the back button is pressed\n\n\n  backButtonPressed() {\n    let newState = {\n      page: \"PatientsPage\",\n      additionalInfo: this.props.pageStatus.FilterPage\n    };\n    this.props.changePage(newState);\n  }\n\n  paginationClicked(e) {\n    this.setState({\n      paginationNumber: e.target.title\n    });\n  }\n\n  getPagination() {\n    var pagination = [];\n\n    if (!this.state.patientInfo) {\n      return null;\n    }\n\n    console.log(\"LOOK HERE\", Object.keys(this.state.patientInfo).length);\n\n    for (var number = 0; number < Object.keys(this.state.patientInfo).length / 4; number++) {\n      if (number + 1 === this.state.paginationNumber) {\n        pagination.push(React.createElement(Pagination.Item, {\n          title: number + 1,\n          style: styles.paginationActive,\n          onClick: e => this.paginationClicked(e),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 378\n          },\n          __self: this\n        }, number + 1));\n      } else {\n        pagination.push(React.createElement(Pagination.Item, {\n          title: number + 1,\n          onClick: e => this.paginationClicked(e),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 385\n          },\n          __self: this\n        }, number + 1));\n      }\n    }\n\n    return React.createElement(Pagination, {\n      style: styles.paginationStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, pagination);\n  }\n\n  render() {\n    let all_filters = this.getFilters();\n    let table = this.getTable();\n    let exportButton = this.getExport();\n    var pagination = this.getPagination();\n    console.log(\"Patients Images Page\", this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, React.createElement(Row, {\n      style: styles.titleStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 12,\n      sm: 8,\n      style: styles.titleText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, \"Individual Patient Images ID: \", this.state.patientID))), React.createElement(Row, {\n      style: styles.summaryStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    }, React.createElement(Col, {\n      style: styles.summaryText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 409\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: styles.underMainStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, React.createElement(DropdownButton, {\n      style: styles.buttonContainer,\n      title: \"TAKE AN ACTION\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      style: styles.buttonUpperBack,\n      onClick: () => this.backButtonPressed(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, \"BACK TO PATIENTS PAGE\"), exportButton)))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 423\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      style: styles.buttonDivShow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, \" \", \"Shown\", \" \"), React.createElement(CustomButton, {\n      style: styles.buttonDivHide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }, \" \", \"Hidden\", \" \")), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }, all_filters)), React.createElement(Col, {\n      sm: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: styles.mainDivStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, table, pagination)))))));\n  }\n\n}\n\nexport default PatientImagesPage;\nconst styles = {\n  titleStyle: {\n    height: \"10vh\",\n    \"margin-bottom\": \"2vh\"\n  },\n  titleText: {\n    display: \"flex\",\n    \"align-items\": \"center\",\n    \"justify-content\": \"center\",\n    \"font-weight\": \"bold\",\n    \"font-size\": \"30px\"\n  },\n  buttonDiv: {\n    width: \"100%\",\n    margin: \"1vh\",\n    \"background-color\": \"white\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  buttonDivPressed: {\n    width: \"100%\",\n    margin: \"1vh\",\n    \"background-color\": \"#78deec\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  buttonDivHide: {\n    width: \"45%\",\n    \"margin-top\": \"1vh\",\n    \"margin-bottom\": \"1vh\",\n    \"margin-left\": \"2vh\",\n    \"background-color\": \"white\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  buttonDivShow: {\n    width: \"45%\",\n    margin: \"1vh\",\n    \"background-color\": \"#78deec\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  mainDivStyle: {\n    \"max-width\": \"120vh\",\n    \"margin-top\": \"1vh\"\n  },\n  underMainStyle: {\n    display: \"flex\",\n    \"flex-direction\": \"column\",\n    \"justify-content\": \"flex-end\",\n    \"align-items\": \"flex-end\",\n    \"padding-right\": \"2vh\"\n  },\n  buttonUpperBack: {\n    width: \"40vh\",\n    color: \"black\",\n    border: \"solid 2px black\",\n    \"font-weight\": \"bold\",\n    \"margin-top\": \"1vh\"\n  },\n  buttonContainer: {\n    width: \"40vh\",\n    color: \"black\",\n    border: \"solid 2px black\",\n    \"font-weight\": \"bold\",\n    \"background-color\": \"#eef27c\"\n  },\n  buttonUpperExport: {\n    width: \"40vh\",\n    color: \"black\",\n    border: \"solid 2px black\",\n    \"font-weight\": \"bold\",\n    \"margin-top\": \"1vh\",\n    \"margin-bottom\": \"1vh\"\n  }\n};","map":{"version":3,"sources":["/Users/keremguventurk/Desktop/northwestern/winter2020/bme390-2/Self-Service-Database-UI/src/views/PatientImagesPage.jsx"],"names":["React","Component","Grid","Row","Col","DropdownButton","CustomButton","TableList","apiBaseURL","axios","require","filter_categories","PatientImagesPage","constructor","props","state","patientID","filterCategories","selectedFilterCategories","exportPressed","display","tableKey","paginationNumber","getData","bind","getFilters","getTable","getExport","exportImagesPressed","exportAllImagesPressed","exportCategoryPressed","backButtonPressed","categoryFilterPressed","paginationClicked","getPagination","componentDidMount","pageStatus","setState","currentComponent","link","autToken","btoa","accessToken","options","url","method","headers","then","response","console","log","data","patientInfo","result","loaded","catch","error","message","backToLoginPage","temp_filter_categories","i","length","category_name","temp_filter_category","indexOf","styles","buttonDivPressed","e","buttonDiv","push","nullTable","titleText","selectedCategories","category","tableData","imageInfo","tempImageData","j","images","k","value","type","text","exam_id","exam_date","image_id","image_type","image_laterality","tempPageStatus","imageID","newState","page","submitFunction","changePage","submitInformation","tempTableData","Math","min","target","title","new_list","filter","name","buttonUpperExport","exportDropdownPressed","additionalInfo","FilterPage","pagination","Object","keys","number","paginationActive","paginationStyle","render","all_filters","table","exportButton","titleStyle","summaryStyle","summaryText","underMainStyle","buttonContainer","buttonUpperBack","buttonDivShow","buttonDivHide","mainDivStyle","height","width","margin","color","border"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { Grid, Row, Col, DropdownButton } from \"react-bootstrap\";\nimport CustomButton from \"components/CustomButton/CustomButton\";\nimport TableList from \"./TableList.jsx\";\n\nimport { apiBaseURL } from \"./Dashboard.jsx\";\n\nconst axios = require(\"axios\");\n\nconst filter_categories = [\n  \"Exam ID\",\n  \"Exam Date\",\n  \"Image ID\",\n  \"Image Procedure\",\n  \"Image Laterality\",\n  \"Link To Image\"\n];\n\n//Feb. 10, 2020categoryFilterPressed  still needs to be written\n\n//PatientImagesPage displays a table of a list of images relating to one exam of one patient\nclass PatientImagesPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      patientID: null,\n      filterCategories: filter_categories,\n      selectedFilterCategories: filter_categories,\n      exportPressed: {\n        display: false\n      },\n      tableKey: 0,\n      paginationNumber: 1\n    };\n    this.getData = this.getData.bind(this);\n    this.getFilters = this.getFilters.bind(this);\n    this.getTable = this.getTable.bind(this);\n    this.getExport = this.getExport.bind(this);\n    this.exportImagesPressed = this.exportImagesPressed.bind(this);\n    this.exportAllImagesPressed = this.exportAllImagesPressed.bind(this);\n    this.exportCategoryPressed = this.exportCategoryPressed.bind(this);\n    this.backButtonPressed = this.backButtonPressed.bind(this);\n    this.categoryFilterPressed = this.categoryFilterPressed.bind(this);\n    this.paginationClicked = this.paginationClicked.bind(this);\n    this.getPagination = this.getPagination.bind(this);\n  }\n\n  componentDidMount() {\n    if (!this.props.pageStatus.PatientImagesPage) {\n      return\n    }\n    this.setState(\n      {\n        patientID: this.props.pageStatus.PatientImagesPage.patientID\n      },\n      () => this.getData()\n    );\n  }\n\n  //Acquires data from the API and sets the state of patientInfo to be patientInfo\n  getData() {\n    let currentComponent = this;\n    let patientID = this.state.patientID;\n    let link = apiBaseURL + \"/ssd_api/patient_images?pt_id=\" + patientID;\n    var autToken = \"Basic \" + btoa(this.props.accessToken + \":something\")\n\n    const options = {\n      url: link,\n      method: 'get',\n      headers: {\n        'Authorization': autToken\n      },\n    };\n    axios(options)\n      .then(function (response) {\n        console.log(\"PATIENT INFO GATHERED\", response.data)\n        let patientInfo = response.data.result[patientID];\n        currentComponent.setState({\n          patientInfo: patientInfo,\n          loaded: true\n        });\n      })\n      .catch(function (error) {\n        console.log(error)\n        if (error.message === \"Request failed with status code 401\") {\n          currentComponent.props.backToLoginPage()\n        }\n      });\n  }\n\n  //Acquires the list of filters to populate on the left side of the website\n  getFilters() {\n    let filter_categories = this.state.filterCategories;\n    let temp_filter_categories = [];\n    for (let i = 0; i < filter_categories.length; i++) {\n      let category_name = filter_categories[i];\n      let temp_filter_category = null;\n      if (this.state.selectedFilterCategories.indexOf(category_name) !== -1) {\n        temp_filter_category = (\n          <CustomButton\n            style={styles.buttonDivPressed}\n            title={category_name}\n            onClick={e => this.categoryFilterPressed(e)}\n          >\n            {\" \"}\n            {category_name}{\" \"}\n          </CustomButton>\n        );\n      } else {\n        temp_filter_category = (\n          <CustomButton\n            style={styles.buttonDiv}\n            title={category_name}\n            onClick={e => this.categoryFilterPressed(e)}\n          >\n            {\" \"}\n            {category_name}{\" \"}\n          </CustomButton>\n        );\n      }\n      temp_filter_categories.push(temp_filter_category);\n    }\n    return temp_filter_categories;\n  }\n\n  //gets the table of information for the right side of the website\n  getTable() {\n\n    var nullTable =\n      <Col style={styles.titleText}>\n        <div> No Images Satisfies This Criteria </div>\n      </Col>\n\n    if (!this.state.loaded || !this.state.patientInfo) {\n      return nullTable;\n\n    }\n\n    let selectedCategories = [];\n    for (let i = 0; i < this.state.filterCategories.length; i++) {\n      let category = this.state.filterCategories[i];\n      if (this.state.selectedFilterCategories.indexOf(category) !== -1) {\n        selectedCategories.push(category);\n      }\n    }\n\n    //from the this.state.patientInfo, acquire imageinfo, then push the contents of imageinfo into tempImageData\n    //i represents the number of patients\n    //j represents the images?\n    //The other j represents going through each category\n    //k represents going through each image's data (and pushing that category information onto each image)\n    //After completing tempImageData, create tableData to display on the webpage\n    //TableList object with categories as columns and tableData as the rows\n    let tableData = [];\n    for (let i = 0; i < this.state.patientInfo.length; i++) {\n      let imageInfo = this.state.patientInfo[i];\n      let tempImageData = [];\n      for (let j = 0; j < imageInfo.images.length; j++) {\n        tempImageData.push([]);\n      }\n      for (let j = 0; j < selectedCategories.length; j++) {\n        let category = selectedCategories[j];\n        if (category === \"Exam ID\") {\n          for (let k = 0; k < tempImageData.length; k++) {\n            let value = {\n              type: \"string\",\n              text: imageInfo.exam_id\n            };\n            tempImageData[k].push(value);\n          }\n        } else if (category === \"Exam Date\") {\n          for (let k = 0; k < tempImageData.length; k++) {\n            let value = {\n              type: \"string\",\n              text: imageInfo.exam_date\n            };\n            tempImageData[k].push(value);\n          }\n        } else if (category === \"Image ID\") {\n          for (let k = 0; k < imageInfo.images.length; k++) {\n            let value = {\n              type: \"string\",\n              text: imageInfo.images[k].image_id\n            };\n            tempImageData[k].push(value);\n          }\n        } else if (category === \"Image Procedure\") {\n          for (let k = 0; k < imageInfo.images.length; k++) {\n            let value = {\n              type: \"string\",\n              text: imageInfo.images[k].image_type\n            };\n            tempImageData[k].push(value);\n          }\n        } else if (category === \"Image Laterality\") {\n          for (let k = 0; k < imageInfo.images.length; k++) {\n            let value = {\n              type: \"string\",\n              text: imageInfo.images[k].image_laterality\n            };\n            tempImageData[k].push(value);\n          }\n        } else if (category === \"Link To Image\") {\n          for (let k = 0; k < imageInfo.images.length; k++) {\n            let tempPageStatus = this.props.pageStatus;\n            tempPageStatus[\"ShowPatientImagePage\"] = {\n              imageID: imageInfo.images[k].image_id,\n              patientID: this.state.patientID\n            };\n            let newState = {\n              page: \"ShowPatientImagePage\",\n              pageStatus: tempPageStatus\n            };\n            let value = {\n              type: \"button\",\n              text: \"See Image\",\n              submitFunction: newState => this.props.changePage(newState),\n              submitInformation: newState\n            };\n            tempImageData[k].push(value);\n          }\n        }\n      }\n      for (let j = 0; j < tempImageData.length; j++) {\n        tableData.push(tempImageData[j]);\n      }\n    }\n\n    var tempTableData = []\n    for (var i = (this.state.paginationNumber - 1) * 4; i < Math.min((this.state.paginationNumber) * 4,tableData.length); i++) {\n      tempTableData.push(tableData[i])\n    }\n\n    this.state.tableKey++;\n\n    return (\n      <TableList\n        key={this.state.tableKey}\n        columns={selectedCategories}\n        rows={tempTableData}\n      ></TableList>\n    );\n  }\n\n  exportImagesPressed() {\n    //code for exporting all images\n  }\n\n  //If the category filter is pressed, update the state of selectedFilterCategories to what is newly selected\n  categoryFilterPressed(e) {\n    let category = e.target.title;\n    if (this.state.selectedFilterCategories.indexOf(category) === -1) {\n      this.state.selectedFilterCategories.push(category);\n      this.setState({\n        selectedFilterCategories: this.state.selectedFilterCategories,\n        tableKey: this.state.tableKey + 1\n      });\n    } else {\n      let new_list = this.state.selectedFilterCategories.filter(function (name) {\n        return name !== category;\n      });\n      this.setState({\n        selectedFilterCategories: new_list,\n        tableKey: this.state.tableKey + 1\n      });\n    }\n  }\n\n  //similar to the other pages, to be used in the getExport function, sets the state when the button is pressed\n  exportAllImagesPressed() {\n    this.setState({\n      exportPressed: {\n        display: !this.state.exportPressed.display\n      }\n    });\n  }\n\n  //Generate multilple buttons when the export all images button is pressed\n  getExport() {\n    if (!this.state.exportPressed.display) {\n      return (\n        <CustomButton\n          style={styles.buttonUpperExport}\n          onClick={() => this.exportAllImagesPressed()}\n        >\n          EXPORT ALL IMAGES\n        </CustomButton>\n      );\n    }\n    return (\n      <div>\n        <CustomButton\n          style={styles.buttonUpperExport}\n          onClick={() => this.exportAllImagesPressed()}\n        >\n          EXPORT ALL IMAGES\n        </CustomButton>\n        <div style={styles.exportDropdownPressed}>\n          <div>\n            <input\n              type=\"checkbox\"\n              title={\"by Patient ID\"}\n              onChange={e => this.exportCategoryPressed(e)}\n            />\n            by Patient ID\n          </div>\n          <div>\n            <input\n              type=\"checkbox\"\n              title={\"by diagnosis\"}\n              onChange={e => this.exportCategoryPressed(e)}\n            />\n            by diagnosis\n          </div>\n          <div>\n            <input\n              type=\"checkbox\"\n              title={\"by image procedure\"}\n              onChange={e => this.exportCategoryPressed(e)}\n            />\n            by image procedure\n          </div>\n        </div>\n        <CustomButton\n          style={styles.buttonUpperExport}\n          onClick={() => this.exportImagesPressed()}\n        >\n          EXPORT IMAGES\n        </CustomButton>\n      </div>\n    );\n  }\n\n  //indicates/sets the state when an export category is pressed\n  exportCategoryPressed(e) {\n    let category = e.target.title;\n    if (this.state.exportPressed[category]) {\n      this.setState({\n        exportPressed: {\n          [category]: !this.state.exportPressed.display,\n          display: true\n        }\n      });\n    } else {\n      this.setState({\n        exportPressed: {\n          [category]: true,\n          display: true\n        }\n      });\n    }\n  }\n\n  //Goes back to the PatientsPage when the back button is pressed\n  backButtonPressed() {\n    let newState = {\n      page: \"PatientsPage\",\n      additionalInfo: this.props.pageStatus.FilterPage\n    };\n    this.props.changePage(newState);\n  }\n\n  paginationClicked(e) {\n    this.setState({\n      paginationNumber: e.target.title\n    })\n  }\n\n  getPagination() {\n    var pagination = []\n    if (!this.state.patientInfo) {\n      return null\n    }\n    console.log(\"LOOK HERE\",Object.keys(this.state.patientInfo).length)\n    for (var number = 0; number < Object.keys(this.state.patientInfo).length / 4; number++) {\n      if (number+1 === this.state.paginationNumber) {\n        pagination.push(\n          <Pagination.Item title={number + 1} style={styles.paginationActive} onClick={e => this.paginationClicked(e)}>\n            {number + 1}\n          </Pagination.Item>,\n        );\n      }\n      else {\n      pagination.push(\n        <Pagination.Item title={number + 1} onClick={e => this.paginationClicked(e)}>\n          {number + 1}\n        </Pagination.Item>,\n      );\n      }\n    }\n    return <Pagination style={styles.paginationStyle}>{pagination}</Pagination>\n  }\n\n  render() {\n    let all_filters = this.getFilters();\n    let table = this.getTable();\n    let exportButton = this.getExport();\n    var pagination = this.getPagination();\n    console.log(\"Patients Images Page\", this.state);\n    return (\n      <div>\n        <Grid fluid>\n          <Row style={styles.titleStyle}>\n            <Col lg={12} sm={8} style={styles.titleText}>\n              <div>Individual Patient Images ID: {this.state.patientID}</div>\n            </Col>\n          </Row>\n          <Row style={styles.summaryStyle}>\n            <Col style={styles.summaryText}>\n              <div style={styles.underMainStyle}>\n                <DropdownButton style={styles.buttonContainer} title=\"TAKE AN ACTION\">\n                  <CustomButton\n                    style={styles.buttonUpperBack}\n                    onClick={() => this.backButtonPressed()}\n                  >\n                    BACK TO PATIENTS PAGE\n                    </CustomButton>\n                  {exportButton}\n                </DropdownButton>\n              </div>\n            </Col>\n          </Row>\n          <Row>\n            <Col sm={3}>\n              <Row>\n                <CustomButton style={styles.buttonDivShow}>\n                  {\" \"}\n                  Shown{\" \"}\n                </CustomButton>\n                <CustomButton style={styles.buttonDivHide}>\n                  {\" \"}\n                  Hidden{\" \"}\n                </CustomButton>\n              </Row>\n              <Row>{all_filters}</Row>\n            </Col>\n            <Col sm={9}>\n              <Grid fluid>\n                <Row>\n                  <div style={styles.mainDivStyle}>\n                  {table}\n                  {pagination}\n                  </div>\n                </Row>\n              </Grid>\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default PatientImagesPage;\n\nconst styles = {\n  titleStyle: {\n    height: \"10vh\",\n    \"margin-bottom\": \"2vh\"\n  },\n  titleText: {\n    display: \"flex\",\n    \"align-items\": \"center\",\n    \"justify-content\": \"center\",\n    \"font-weight\": \"bold\",\n    \"font-size\": \"30px\"\n  },\n  buttonDiv: {\n    width: \"100%\",\n    margin: \"1vh\",\n    \"background-color\": \"white\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  buttonDivPressed: {\n    width: \"100%\",\n    margin: \"1vh\",\n    \"background-color\": \"#78deec\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  buttonDivHide: {\n    width: \"45%\",\n    \"margin-top\": \"1vh\",\n    \"margin-bottom\": \"1vh\",\n    \"margin-left\": \"2vh\",\n    \"background-color\": \"white\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  buttonDivShow: {\n    width: \"45%\",\n    margin: \"1vh\",\n    \"background-color\": \"#78deec\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  mainDivStyle: {\n    \"max-width\": \"120vh\",\n    \"margin-top\": \"1vh\",\n  },\n  underMainStyle: {\n    display: \"flex\",\n    \"flex-direction\": \"column\",\n    \"justify-content\": \"flex-end\",\n    \"align-items\": \"flex-end\",\n    \"padding-right\": \"2vh\"\n  },\n  buttonUpperBack: {\n    width: \"40vh\",\n    color: \"black\",\n    border: \"solid 2px black\",\n    \"font-weight\": \"bold\",\n    \"margin-top\": \"1vh\"\n  },\n  buttonContainer: {\n    width: \"40vh\",\n    color: \"black\",\n    border: \"solid 2px black\",\n    \"font-weight\": \"bold\",\n    \"background-color\": \"#eef27c\",\n  },\n  buttonUpperExport: {\n    width: \"40vh\",\n    color: \"black\",\n    border: \"solid 2px black\",\n    \"font-weight\": \"bold\",\n    \"margin-top\": \"1vh\",\n    \"margin-bottom\": \"1vh\"\n  }\n};\n"]},"metadata":{},"sourceType":"module"}