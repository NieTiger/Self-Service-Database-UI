{"ast":null,"code":"var _jsxFileName = \"/Users/keremguventurk/Desktop/northwestern/winter2020/bme390-2/Self-Service-Database-UI/src/views/ExamsPage.jsx\";\n\n/*!\n\n=========================================================\n* Light Bootstrap Dashboard React - v1.3.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\nimport React, { Component } from \"react\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport CustomButton from \"components/CustomButton/CustomButton\";\nimport TableList from \"./TableList.jsx\";\nimport { apiBaseURL } from \"./Dashboard.jsx\";\n\nconst axios = require(\"axios\");\n\nconst frontendToBackend = {\n  \"Patient ID\": \"pt_id\",\n  \"Image Info\": \"images\",\n  \"Exam ID\": \"exam_id\",\n  \"Exam Date\": \"exam_date\"\n}; //Feb. 10, 2020: ExamPage data is not displaying currently\n//ExamPage displays all patient exams on a page\n\nclass ExamPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      patientsIDs: [],\n      patientInfo: [],\n      filterCategories: [\"Patient ID\", \"Image Info\", \"Exam ID\", \"Exam Date\", \"Exam Links\"],\n      selectedFilterCategories: [\"Patient ID\", \"Image Info\", \"Exam ID\", \"Exam Date\", \"Exam Links\"],\n      tableKey: 1,\n      exportPressed: {\n        display: false\n      }\n    };\n    this.getData = this.getData.bind(this);\n    this.editData = this.editData.bind(this);\n    this.getFilters = this.getFilters.bind(this);\n    this.categoryFilterPressed = this.categoryFilterPressed.bind(this);\n    this.backButtonPressed = this.backButtonPressed.bind(this);\n    this.exportAllImagesPressed = this.exportAllImagesPressed.bind(this);\n    this.getExport = this.getExport.bind(this);\n    this.exportCategoryPressed = this.exportCategoryPressed.bind(this);\n    this.exportImagesPressed = this.exportImagesPressed.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState({\n      patientsIDs: this.props.pageStatus.ExamsPage.patientsIDs\n    }, () => this.getData());\n  } //Similar to the other pages, getData() acquires data from the API and sets the state of patientInfo to currentInfo\n\n\n  getData() {\n    var currentComponent = this;\n\n    for (var i = 0; i < this.state.patientsIDs.length; i++) {\n      var patientID = this.state.patientsIDs[i];\n      var link = apiBaseURL + \"/ssd_api/patient_images?pt_id=\" + patientID;\n      var autToken = \"Basic \" + btoa(this.props.accessToken + \":something\");\n      const options = {\n        url: link,\n        method: 'get',\n        headers: {\n          'Authorization': autToken\n        }\n      };\n      axios(options).then(function (response) {\n        let currentInfo = currentComponent.state.patientInfo;\n        currentInfo.push(response.data.result);\n        currentComponent.setState({\n          patientInfo: currentInfo\n        }, () => {\n          currentComponent.editData();\n        });\n      }).catch(function (error) {\n        console.log(error);\n\n        if (error.message === \"Request failed with status code 401\") {\n          currentComponent.props.backToLoginPage();\n        }\n      });\n    }\n  } //gets filter names from this.state.filterCategories (already preset to certain ones (see top of code))\n\n\n  getFilters() {\n    var filter_categories = this.state.filterCategories;\n    var temp_filter_categories = [];\n\n    for (var i = 0; i < filter_categories.length; i++) {\n      var category_name = filter_categories[i];\n      var temp_filter_category = null;\n\n      if (this.state.selectedFilterCategories.indexOf(category_name) !== -1) {\n        //if category_name exists in selectedFilterCategories...\n        temp_filter_category = React.createElement(CustomButton, {\n          style: styles.buttonDivPressed,\n          title: category_name,\n          onClick: e => this.categoryFilterPressed(e),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126\n          },\n          __self: this\n        }, \" \", category_name, \" \");\n      } else {\n        temp_filter_category = React.createElement(CustomButton, {\n          style: styles.buttonDiv,\n          title: category_name,\n          onClick: e => this.categoryFilterPressed(e),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, \" \", category_name, \" \");\n      }\n\n      temp_filter_categories.push(temp_filter_category);\n    }\n\n    return temp_filter_categories;\n  }\n\n  editData() {\n    if (this.state.patientsIDs.length !== this.state.patientInfo.length) {\n      return;\n    }\n\n    let patientInfo = {};\n\n    for (var i = 0; i < this.state.patientInfo.length; i++) {\n      let patient = this.state.patientInfo[i];\n      let key_list = Object.keys(patient);\n      patientInfo[key_list[0]] = patient[key_list[0]];\n    }\n\n    this.setState({\n      patientInfo: patientInfo,\n      loaded: \"true\"\n    });\n  }\n\n  categoryFilterPressed(e) {\n    let category = e.target.title;\n\n    if (this.state.selectedFilterCategories.indexOf(category) === -1) {\n      this.state.selectedFilterCategories.push(category);\n      this.setState({\n        selectedFilterCategories: this.state.selectedFilterCategories,\n        tableKey: this.state.tableKey + 1\n      });\n    } else {\n      var new_list = this.state.selectedFilterCategories.filter(function (name) {\n        return name !== category;\n      });\n      this.setState({\n        selectedFilterCategories: new_list,\n        tableKey: this.state.tableKey + 1\n      });\n    }\n  } //Three kinds of possible value to be generated\n  //1. Patient ID\n  //2. Images\n  //3. actual exam information\n  //returns TableList object with the categories as the columns and table information as the rows\n\n\n  getTable() {\n    if (!this.state.loaded) {\n      return null;\n    }\n\n    let patientInfo = this.state.patientInfo;\n    let categoryTitles = [];\n    let tableData = [];\n\n    for (var i = 0; i < this.state.patientsIDs.length; i++) {\n      let patientID = this.state.patientsIDs[i];\n\n      for (var j = 0; j < patientInfo[patientID].length; j++) {\n        let examInfo = patientInfo[patientID][j];\n        let examID = [];\n        let tempPatientInfo = [];\n\n        for (var k = 0; k < this.state.filterCategories.length; k++) {\n          var value = {}; // added this\n\n          let category = this.state.filterCategories[k];\n\n          if (this.state.selectedFilterCategories.indexOf(category) !== -1) {\n            if (categoryTitles.indexOf(category) === -1) {\n              categoryTitles.push(category);\n            }\n\n            if (category === \"Patient ID\") {\n              value[\"type\"] = \"button\";\n              value[\"text\"] = patientID;\n              var tempPageStatus = this.props.pageStatus;\n              tempPageStatus[\"PatientHistoryPage\"] = {\n                patientID: patientID,\n                patientInfo: patientInfo[patientID]\n              };\n              let newState = {\n                page: \"PatientHistoryPage\",\n                pageStatus: tempPageStatus\n              };\n\n              value[\"submitFunction\"] = newState => this.props.changePage(newState);\n\n              value[\"submitInformation\"] = newState;\n              tempPatientInfo.push(value);\n            } else if (category === \"Exam Links\") {\n              examID = examInfo[\"exam_id\"];\n              value[\"text\"] = examID;\n              value[\"type\"] = \"button\";\n\n              value[\"submitFunction\"] = () => {};\n\n              value[\"submitInformation\"] = null;\n              tempPatientInfo.push(value);\n            } else if (category === \"Image Info\") {\n              var text = [];\n              var images = examInfo[frontendToBackend[category]];\n              var lastImage = images[images.length - 1];\n\n              if (images.length === 0) {\n                value[\"type\"] = \"string\";\n                value[\"text\"] = \"\";\n                tempPatientInfo.push(value);\n              } else {\n                text.push(\"Image ID (First): \" + (lastImage.image_id - lastImage.image_num + 1));\n                text.push(React.createElement(\"br\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 255\n                  },\n                  __self: this\n                }));\n                text.push(\"# of Images: \" + lastImage.image_num);\n                text.push(React.createElement(\"br\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 257\n                  },\n                  __self: this\n                }));\n                text.push(\"Image Laterality: \" + lastImage.image_laterality);\n                text.push(React.createElement(\"br\", {\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 259\n                  },\n                  __self: this\n                }));\n                text.push(\"Image Type: \" + lastImage.image_type);\n                value[\"type\"] = \"string\";\n                value[\"text\"] = text;\n                tempPatientInfo.push(value);\n              }\n            } else {\n              //will need to come back to this part to populate the exams page table\n              value[\"type\"] = \"string\";\n              value[\"text\"] = examInfo[frontendToBackend[category]];\n              tempPatientInfo.push(value); //tempPatientInfo.push(examInfo[frontendToBackend[category]])\n            }\n          }\n\n          var str102 = \"this is tempPatientInfo\"; //error checking\n        }\n\n        tableData.push(tempPatientInfo);\n        var str103 = \"this is tableData\"; //error checking\n      }\n    }\n\n    var str10 = \"this is tableData\";\n    var str20 = \"this is this.state.filterCategories\";\n    return React.createElement(TableList, {\n      key: this.state.tableKey,\n      columns: categoryTitles,\n      rows: tableData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284\n      },\n      __self: this\n    });\n  }\n\n  backButtonPressed() {\n    let newState = {\n      page: \"PatientsPage\"\n    };\n    /*let allows you to declare variables that are limited to a scope of ablock statement, unlike var, which defines variable globally*/\n\n    this.props.changePage(newState);\n  }\n\n  exportAllImagesPressed() {\n    this.setState({\n      exportPressed: {\n        display: !this.state.exportPressed.display\n      }\n    });\n  }\n\n  exportCategoryPressed(e) {\n    let category = e.target.title;\n\n    if (this.state.exportPressed[category]) {\n      this.setState({\n        exportPressed: {\n          [category]: !this.state.exportPressed.display,\n          display: true\n        }\n      });\n    } else {\n      this.setState({\n        exportPressed: {\n          [category]: true,\n          display: true\n        }\n      });\n    }\n  }\n\n  exportImagesPressed() {//code for exporting all images\n  }\n\n  getExport() {\n    if (!this.state.exportPressed.display) {\n      return React.createElement(CustomButton, {\n        style: styles.buttonUpperExport,\n        onClick: () => this.exportAllImagesPressed(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333\n        },\n        __self: this\n      }, \"EXPORT ALL IMAGES\");\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 342\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      style: styles.buttonUpperExport,\n      onClick: () => this.exportAllImagesPressed(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343\n      },\n      __self: this\n    }, \"EXPORT ALL IMAGES\"), React.createElement(\"div\", {\n      style: styles.exportDropdownPressed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      title: \"by Patient ID\",\n      onChange: e => this.exportCategoryPressed(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351\n      },\n      __self: this\n    }), \"by Patient ID\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      title: \"by diagnosis\",\n      onChange: e => this.exportCategoryPressed(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }), \"by diagnosis\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"checkbox\",\n      title: \"by image procedure\",\n      onChange: e => this.exportCategoryPressed(e),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367\n      },\n      __self: this\n    }), \"by image procedure\")), React.createElement(CustomButton, {\n      style: styles.buttonUpperExport,\n      onClick: () => this.exportImagesPressed(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375\n      },\n      __self: this\n    }, \"EXPORT IMAGES\"));\n  }\n\n  render() {\n    var all_filters = this.getFilters();\n    var exportButton = this.getExport();\n    var mainTable = this.getTable();\n    console.log(\"ExamsPage\", this.state);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(Row, {\n      style: styles.titleStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393\n      },\n      __self: this\n    }, React.createElement(Col, {\n      lg: 12,\n      sm: 8,\n      style: styles.titleText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, \"Your Exams For Patients\"))), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 398\n      },\n      __self: this\n    }, React.createElement(Col, {\n      sm: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      style: styles.buttonDivShow,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, \" \", \"Shown\", \" \"), React.createElement(CustomButton, {\n      style: styles.buttonDivHide,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }, \" \", \"Hidden\", \" \")), React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 410\n      },\n      __self: this\n    }, all_filters)), React.createElement(Col, {\n      sm: 9,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 413\n      },\n      __self: this\n    }, React.createElement(Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 414\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      style: styles.mainDivStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 415\n      },\n      __self: this\n    }, mainTable), React.createElement(\"div\", {\n      style: styles.underMainStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416\n      },\n      __self: this\n    }, React.createElement(CustomButton, {\n      style: styles.buttonUpperBack,\n      onClick: () => this.backButtonPressed(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417\n      },\n      __self: this\n    }, \"BACK TO PATIENTS PAGE\"), exportButton)))))));\n  }\n\n}\n\nexport default ExamPage;\nconst styles = {\n  titleStyle: {\n    height: \"10vh\",\n    \"margin-bottom\": \"2vh\"\n  },\n  titleText: {\n    display: \"flex\",\n    \"align-items\": \"center\",\n    \"justify-content\": \"center\",\n    \"font-weight\": \"bold\",\n    \"font-size\": \"30px\"\n  },\n  buttonDiv: {\n    width: \"100%\",\n    margin: \"1vh\",\n    \"background-color\": \"white\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  buttonDivPressed: {\n    width: \"100%\",\n    margin: \"1vh\",\n    \"background-color\": \"#78deec\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  buttonDivHide: {\n    width: \"45%\",\n    \"margin-top\": \"1vh\",\n    \"margin-bottom\": \"1vh\",\n    \"margin-left\": \"2vh\",\n    \"background-color\": \"white\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  buttonDivShow: {\n    width: \"45%\",\n    margin: \"1vh\",\n    \"background-color\": \"#78deec\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  underMainStyle: {\n    display: \"flex\",\n    \"flex-direction\": \"column\",\n    \"justify-content\": \"flex-end\",\n    \"align-items\": \"flex-end\",\n    \"padding-right\": \"2vh\"\n  },\n  mainDivStyle: {\n    height: \"70vh\",\n    overflow: \"scroll\"\n  },\n  buttonUpperBack: {\n    width: \"40vh\",\n    color: \"black\",\n    border: \"solid 2px black\",\n    \"font-weight\": \"bold\",\n    \"background-color\": \"#eef27c\",\n    \"margin-top\": \"1vh\"\n  },\n  buttonUpperExport: {\n    width: \"40vh\",\n    color: \"black\",\n    border: \"solid 2px black\",\n    \"font-weight\": \"bold\",\n    \"background-color\": \"#eef27c\",\n    \"margin-top\": \"1vh\",\n    \"margin-bottom\": \"1vh\"\n  }\n};","map":{"version":3,"sources":["/Users/keremguventurk/Desktop/northwestern/winter2020/bme390-2/Self-Service-Database-UI/src/views/ExamsPage.jsx"],"names":["React","Component","Grid","Row","Col","CustomButton","TableList","apiBaseURL","axios","require","frontendToBackend","ExamPage","constructor","props","state","patientsIDs","patientInfo","filterCategories","selectedFilterCategories","tableKey","exportPressed","display","getData","bind","editData","getFilters","categoryFilterPressed","backButtonPressed","exportAllImagesPressed","getExport","exportCategoryPressed","exportImagesPressed","componentDidMount","setState","pageStatus","ExamsPage","currentComponent","i","length","patientID","link","autToken","btoa","accessToken","options","url","method","headers","then","response","currentInfo","push","data","result","catch","error","console","log","message","backToLoginPage","filter_categories","temp_filter_categories","category_name","temp_filter_category","indexOf","styles","buttonDivPressed","e","buttonDiv","patient","key_list","Object","keys","loaded","category","target","title","new_list","filter","name","getTable","categoryTitles","tableData","j","examInfo","examID","tempPatientInfo","k","value","tempPageStatus","newState","page","changePage","text","images","lastImage","image_id","image_num","image_laterality","image_type","str102","str103","str10","str20","buttonUpperExport","exportDropdownPressed","render","all_filters","exportButton","mainTable","titleStyle","titleText","buttonDivShow","buttonDivHide","mainDivStyle","underMainStyle","buttonUpperBack","height","width","margin","color","border","overflow"],"mappings":"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","sourcesContent":["/*!\n\n=========================================================\n* Light Bootstrap Dashboard React - v1.3.0\n=========================================================\n\n* Product Page: https://www.creative-tim.com/product/light-bootstrap-dashboard-react\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\n* Licensed under MIT (https://github.com/creativetimofficial/light-bootstrap-dashboard-react/blob/master/LICENSE.md)\n\n* Coded by Creative Tim\n\n=========================================================\n\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n*/\n\nimport React, { Component } from \"react\";\nimport { Grid, Row, Col } from \"react-bootstrap\";\nimport CustomButton from \"components/CustomButton/CustomButton\";\nimport TableList from \"./TableList.jsx\";\n\nimport { apiBaseURL } from \"./Dashboard.jsx\";\n\nconst axios = require(\"axios\");\n\nconst frontendToBackend = {\n  \"Patient ID\": \"pt_id\",\n  \"Image Info\": \"images\",\n  \"Exam ID\": \"exam_id\",\n  \"Exam Date\": \"exam_date\"\n};\n\n//Feb. 10, 2020: ExamPage data is not displaying currently\n\n//ExamPage displays all patient exams on a page\nclass ExamPage extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      patientsIDs: [],\n      patientInfo: [],\n      filterCategories: [\n        \"Patient ID\",\n        \"Image Info\",\n        \"Exam ID\",\n        \"Exam Date\",\n        \"Exam Links\"\n      ],\n      selectedFilterCategories: [\n        \"Patient ID\",\n        \"Image Info\",\n        \"Exam ID\",\n        \"Exam Date\",\n        \"Exam Links\"\n      ],\n      tableKey: 1,\n      exportPressed: {\n        display: false\n      }\n    };\n    this.getData = this.getData.bind(this);\n    this.editData = this.editData.bind(this);\n    this.getFilters = this.getFilters.bind(this);\n    this.categoryFilterPressed = this.categoryFilterPressed.bind(this);\n    this.backButtonPressed = this.backButtonPressed.bind(this);\n    this.exportAllImagesPressed = this.exportAllImagesPressed.bind(this);\n    this.getExport = this.getExport.bind(this);\n    this.exportCategoryPressed = this.exportCategoryPressed.bind(this);\n    this.exportImagesPressed = this.exportImagesPressed.bind(this);\n  }\n\n  componentDidMount() {\n    this.setState(\n      {\n        patientsIDs: this.props.pageStatus.ExamsPage.patientsIDs\n      },\n      () => this.getData()\n    );\n  }\n\n  //Similar to the other pages, getData() acquires data from the API and sets the state of patientInfo to currentInfo\n  getData() {\n    var currentComponent = this;\n    for (var i = 0; i < this.state.patientsIDs.length; i++) {\n      var patientID = this.state.patientsIDs[i];\n      var link = apiBaseURL + \"/ssd_api/patient_images?pt_id=\" + patientID;\n      var autToken = \"Basic \" + btoa(this.props.accessToken + \":something\")\n\n      const options = {\n        url: link,\n        method: 'get',\n        headers: {\n          'Authorization': autToken\n        },\n      };\n\n      axios(options)\n        .then(function (response) {\n          let currentInfo = currentComponent.state.patientInfo;\n          currentInfo.push(response.data.result);\n          currentComponent.setState({ patientInfo: currentInfo }, () => {\n            currentComponent.editData();\n          });\n        })\n        .catch(function (error) {\n          console.log(error);\n          if (error.message === \"Request failed with status code 401\") {\n            currentComponent.props.backToLoginPage()\n          }\n        });\n    }\n  }\n\n  //gets filter names from this.state.filterCategories (already preset to certain ones (see top of code))\n  getFilters() {\n    var filter_categories = this.state.filterCategories;\n    var temp_filter_categories = [];\n    for (var i = 0; i < filter_categories.length; i++) {\n      var category_name = filter_categories[i];\n      var temp_filter_category = null;\n      if (this.state.selectedFilterCategories.indexOf(category_name) !== -1) {\n        //if category_name exists in selectedFilterCategories...\n        temp_filter_category = (\n          <CustomButton\n            style={styles.buttonDivPressed}\n            title={category_name}\n            onClick={e => this.categoryFilterPressed(e)}\n          >\n            {\" \"}\n            {category_name}{\" \"}\n          </CustomButton>\n        );\n      } else {\n        temp_filter_category = (\n          <CustomButton\n            style={styles.buttonDiv}\n            title={category_name}\n            onClick={e => this.categoryFilterPressed(e)}\n          >\n            {\" \"}\n            {category_name}{\" \"}\n          </CustomButton>\n        );\n      }\n      temp_filter_categories.push(temp_filter_category);\n    }\n    return temp_filter_categories;\n  }\n\n  editData() {\n    if (this.state.patientsIDs.length !== this.state.patientInfo.length) {\n      return;\n    }\n\n    let patientInfo = {};\n\n    for (var i = 0; i < this.state.patientInfo.length; i++) {\n      let patient = this.state.patientInfo[i];\n      let key_list = Object.keys(patient);\n      patientInfo[key_list[0]] = patient[key_list[0]];\n    }\n    this.setState({\n      patientInfo: patientInfo,\n      loaded: \"true\"\n    });\n  }\n\n  categoryFilterPressed(e) {\n    let category = e.target.title;\n    if (this.state.selectedFilterCategories.indexOf(category) === -1) {\n      this.state.selectedFilterCategories.push(category);\n      this.setState({\n        selectedFilterCategories: this.state.selectedFilterCategories,\n        tableKey: this.state.tableKey + 1\n      });\n    } else {\n      var new_list = this.state.selectedFilterCategories.filter(function (name) {\n        return name !== category;\n      });\n      this.setState({\n        selectedFilterCategories: new_list,\n        tableKey: this.state.tableKey + 1\n      });\n    }\n  }\n\n  //Three kinds of possible value to be generated\n  //1. Patient ID\n  //2. Images\n  //3. actual exam information\n  //returns TableList object with the categories as the columns and table information as the rows\n  getTable() {\n    if (!this.state.loaded) {\n      return null;\n    }\n    let patientInfo = this.state.patientInfo;\n    let categoryTitles = [];\n    let tableData = [];\n\n    for (var i = 0; i < this.state.patientsIDs.length; i++) {\n      let patientID = this.state.patientsIDs[i];\n      for (var j = 0; j < patientInfo[patientID].length; j++) {\n        let examInfo = patientInfo[patientID][j];\n        let examID = [];\n        let tempPatientInfo = [];\n        for (var k = 0; k < this.state.filterCategories.length; k++) {\n          var value = {}; // added this\n          let category = this.state.filterCategories[k];\n          if (this.state.selectedFilterCategories.indexOf(category) !== -1) {\n            if (categoryTitles.indexOf(category) === -1) {\n              categoryTitles.push(category);\n            }\n            if (category === \"Patient ID\") {\n              value[\"type\"] = \"button\";\n              value[\"text\"] = patientID;\n\n              var tempPageStatus = this.props.pageStatus;\n              tempPageStatus[\"PatientHistoryPage\"] = {\n                patientID: patientID,\n                patientInfo: patientInfo[patientID]\n              };\n              let newState = {\n                page: \"PatientHistoryPage\",\n                pageStatus: tempPageStatus\n              };\n              value[\"submitFunction\"] = newState =>\n                this.props.changePage(newState);\n              value[\"submitInformation\"] = newState;\n\n              tempPatientInfo.push(value);\n            } else if (category === \"Exam Links\") {\n              examID = examInfo[\"exam_id\"];\n              value[\"text\"] = examID;\n              value[\"type\"] = \"button\";\n              value[\"submitFunction\"] = () => { }\n              value[\"submitInformation\"] = null;\n\n              tempPatientInfo.push(value);\n            } else if (category === \"Image Info\") {\n              var text = [];\n              var images = examInfo[frontendToBackend[category]];\n              var lastImage = images[images.length - 1];\n\n              if (images.length === 0) {\n                value[\"type\"] = \"string\";\n                value[\"text\"] = \"\";\n                tempPatientInfo.push(value);\n              } else {\n                text.push(\n                  \"Image ID (First): \" +\n                  (lastImage.image_id - lastImage.image_num + 1)\n                );\n                text.push(<br />);\n                text.push(\"# of Images: \" + lastImage.image_num);\n                text.push(<br />);\n                text.push(\"Image Laterality: \" + lastImage.image_laterality);\n                text.push(<br />);\n                text.push(\"Image Type: \" + lastImage.image_type);\n\n                value[\"type\"] = \"string\";\n                value[\"text\"] = text;\n                tempPatientInfo.push(value);\n              }\n            } else {\n              //will need to come back to this part to populate the exams page table\n              value[\"type\"] = \"string\";\n              value[\"text\"] = examInfo[frontendToBackend[category]];\n              tempPatientInfo.push(value);\n              //tempPatientInfo.push(examInfo[frontendToBackend[category]])\n            }\n          }\n          var str102 = \"this is tempPatientInfo\"; //error checking\n        }\n        tableData.push(tempPatientInfo);\n        var str103 = \"this is tableData\"; //error checking\n      }\n    }\n\n    var str10 = \"this is tableData\";\n    var str20 = \"this is this.state.filterCategories\";\n    return (\n      <TableList\n        key={this.state.tableKey}\n        columns={categoryTitles}\n        rows={tableData}\n      ></TableList>\n    );\n  }\n\n  backButtonPressed() {\n    let newState = {\n      page: \"PatientsPage\"\n    }; /*let allows you to declare variables that are limited to a scope of ablock statement, unlike var, which defines variable globally*/\n    this.props.changePage(newState);\n  }\n\n  exportAllImagesPressed() {\n    this.setState({\n      exportPressed: {\n        display: !this.state.exportPressed.display\n      }\n    });\n  }\n\n  exportCategoryPressed(e) {\n    let category = e.target.title;\n    if (this.state.exportPressed[category]) {\n      this.setState({\n        exportPressed: {\n          [category]: !this.state.exportPressed.display,\n          display: true\n        }\n      });\n    } else {\n      this.setState({\n        exportPressed: {\n          [category]: true,\n          display: true\n        }\n      });\n    }\n  }\n\n  exportImagesPressed() {\n    //code for exporting all images\n  }\n\n  getExport() {\n    if (!this.state.exportPressed.display) {\n      return (\n        <CustomButton\n          style={styles.buttonUpperExport}\n          onClick={() => this.exportAllImagesPressed()}\n        >\n          EXPORT ALL IMAGES\n        </CustomButton>\n      );\n    }\n    return (\n      <div>\n        <CustomButton\n          style={styles.buttonUpperExport}\n          onClick={() => this.exportAllImagesPressed()}\n        >\n          EXPORT ALL IMAGES\n        </CustomButton>\n        <div style={styles.exportDropdownPressed}>\n          <div>\n            <input\n              type=\"checkbox\"\n              title={\"by Patient ID\"}\n              onChange={e => this.exportCategoryPressed(e)}\n            />\n            by Patient ID\n          </div>\n          <div>\n            <input\n              type=\"checkbox\"\n              title={\"by diagnosis\"}\n              onChange={e => this.exportCategoryPressed(e)}\n            />\n            by diagnosis\n          </div>\n          <div>\n            <input\n              type=\"checkbox\"\n              title={\"by image procedure\"}\n              onChange={e => this.exportCategoryPressed(e)}\n            />\n            by image procedure\n          </div>\n        </div>\n        <CustomButton\n          style={styles.buttonUpperExport}\n          onClick={() => this.exportImagesPressed()}\n        >\n          EXPORT IMAGES\n        </CustomButton>\n      </div>\n    );\n  }\n\n  render() {\n    var all_filters = this.getFilters();\n    var exportButton = this.getExport();\n    var mainTable = this.getTable();\n    console.log(\"ExamsPage\", this.state);\n    return (\n      <div>\n        <Grid fluid>\n          <Row style={styles.titleStyle}>\n            <Col lg={12} sm={8} style={styles.titleText}>\n              <div>Your Exams For Patients</div>\n            </Col>\n          </Row>\n          <Row>\n            <Col sm={3}>\n              <Row>\n                <CustomButton style={styles.buttonDivShow}>\n                  {\" \"}\n                  Shown{\" \"}\n                </CustomButton>\n                <CustomButton style={styles.buttonDivHide}>\n                  {\" \"}\n                  Hidden{\" \"}\n                </CustomButton>\n              </Row>\n              <Row>{all_filters}</Row>\n            </Col>\n            <Col sm={9}>\n              <Grid fluid>\n                <Row>\n                  <div style={styles.mainDivStyle}>{mainTable}</div>\n                  <div style={styles.underMainStyle}>\n                    <CustomButton\n                      style={styles.buttonUpperBack}\n                      onClick={() => this.backButtonPressed()}\n                    >\n                      BACK TO PATIENTS PAGE\n                    </CustomButton>\n                    {exportButton}\n                  </div>\n                </Row>\n              </Grid>\n            </Col>\n          </Row>\n        </Grid>\n      </div>\n    );\n  }\n}\nexport default ExamPage;\n\nconst styles = {\n  titleStyle: {\n    height: \"10vh\",\n    \"margin-bottom\": \"2vh\"\n  },\n  titleText: {\n    display: \"flex\",\n    \"align-items\": \"center\",\n    \"justify-content\": \"center\",\n    \"font-weight\": \"bold\",\n    \"font-size\": \"30px\"\n  },\n  buttonDiv: {\n    width: \"100%\",\n    margin: \"1vh\",\n    \"background-color\": \"white\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  buttonDivPressed: {\n    width: \"100%\",\n    margin: \"1vh\",\n    \"background-color\": \"#78deec\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  buttonDivHide: {\n    width: \"45%\",\n    \"margin-top\": \"1vh\",\n    \"margin-bottom\": \"1vh\",\n    \"margin-left\": \"2vh\",\n    \"background-color\": \"white\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  buttonDivShow: {\n    width: \"45%\",\n    margin: \"1vh\",\n    \"background-color\": \"#78deec\",\n    color: \"black\",\n    border: \"solid 2px black\"\n  },\n  underMainStyle: {\n    display: \"flex\",\n    \"flex-direction\": \"column\",\n    \"justify-content\": \"flex-end\",\n    \"align-items\": \"flex-end\",\n    \"padding-right\": \"2vh\"\n  },\n  mainDivStyle: {\n    height: \"70vh\",\n    overflow: \"scroll\"\n  },\n  buttonUpperBack: {\n    width: \"40vh\",\n    color: \"black\",\n    border: \"solid 2px black\",\n    \"font-weight\": \"bold\",\n    \"background-color\": \"#eef27c\",\n    \"margin-top\": \"1vh\"\n  },\n  buttonUpperExport: {\n    width: \"40vh\",\n    color: \"black\",\n    border: \"solid 2px black\",\n    \"font-weight\": \"bold\",\n    \"background-color\": \"#eef27c\",\n    \"margin-top\": \"1vh\",\n    \"margin-bottom\": \"1vh\"\n  }\n};\n"]},"metadata":{},"sourceType":"module"}